buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://dl.bintray.com/ngbinh/maven" }
    }

    dependencies {
        classpath "org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:1.0.1"
    }
}

plugins {
    id 'application'
    id 'idea'
    id 'eclipse'
    id 'scala'
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "org.scoverage" version "3.0.0"
}

repositories {
    mavenLocal()
    mavenCentral()
}

group theGroup
version theVersion
description theDescription

project.ext {
  scalaCompatVersion = '2.11'
  scalaVersion = '2.11.8'
}


apply plugin: 'scalaStyle'

mainClassName = 'de.example.spark.datadog.sink.Application'


dependencies {

  // Spark
  compileOnly("org.apache.spark:spark-sql_${scalaCompatVersion}:2.3.2") {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
  }

  // Scala
  implementation("org.scala-lang:scala-library:${scalaVersion}")

  // Logging
  implementation("com.typesafe.scala-logging:scala-logging_${scalaCompatVersion}:3.9.0") {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude group: 'org.slf4j', module: 'slf4j-api'
  }

  // Datadog reporter for com.codahale.metrics.MetricRegistry
  implementation('org.coursera:dropwizard-metrics-datadog:1.1.14')
  constraints {
      implementation('io.dropwizard.metrics:metrics-core:3.1.5') {
          because 'Spark is using it. Otherwise we would end up having two different libraries at the same time.'
      }
  }
  
  // Test
  // Spark
  testCompileOnly("org.apache.spark:spark-core_${scalaCompatVersion}:2.3.2")
  testCompileOnly("org.apache.spark:spark-sql_${scalaCompatVersion}:2.3.2") {
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
  }
  // Scala
  testCompileOnly("org.apache.spark:spark-hive_${scalaCompatVersion}:2.3.2")
  testCompileOnly("org.scalatest:scalatest_${scalaCompatVersion}:3.0.4")
  testCompileOnly "org.skyscreamer:jsonassert:1.5.0"
  testCompileOnly "junit:junit:4.12"
  testCompileOnly('org.hamcrest:hamcrest-library:1.3')
  testCompileOnly("org.mockito:mockito-scala_${scalaCompatVersion}:1.0.4")
}

scalaStyle {
    source = 'src/main/scala'
    failOnViolation = true
    failOnWarning = true
    includeTestSourceDirectory = true
    outputFile = project.buildDir.absolutePath + "/reports/scalastyle.xml"
    configLocation = "scalastyle_config.xml"
}

scoverage {
    scoverageScalaVersion = "2.11"
    coverageOutputCobertura = true
}

shadowJar {
  classifier null
}
