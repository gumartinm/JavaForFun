project.ext {

    // Compile dependencies
    // Spring
    springVersion='4.3.0.RELEASE'
    // Spring JPA
    springJPAVersion='1.10.2.RELEASE'
    // Spring Envers
    springDataEnversVersion='1.0.2.RELEASE'
    hibernateEnversVersion='5.2.1.Final'
    // Hibernate
    hibernateValidatorVersion='5.2.4.Final'
    hibernateEntityManagerVersion='5.2.1.Final'
    // QueryDSL
    queryDslAptVersion='4.1.3'
    // Liquibase or FlyWay
    liquibaseVersion='3.5.3'
    flyWayVersion='4.0.3'
    // Jackson.
    jacksonVersion='2.8.1'
    // Validation API. JSR-303
    validationAPIVersion='1.1.0.Final'

    // Provided dependencies.
    // Provided dependencies are compileOnly in Gradle. Unlike maven they are not included on the test classpath. Gradle sucks?!
    servletApiVersion='4.0.0-b01'

    // LOG4J2 dependencies
    slf4jVersion='2.7'
    log4jCoreVersion='2.7'
    jclOverSlf4jVersion='1.7.22'

    // Unit test dependencies
    dockerComposeRuleVersion='0.28.1'
    mockitoVersion='2.4.1'
    junitVersion='4.12'

    // Integration test dependencies
    h2DatabaseVersion='1.4.193'
    mysqlConnectorVersion='6.0.5'

    // Plugins
    queryDslPluginVersion='1.0.7'
    dockerComposePluginVersion='0.3.16'

}


subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    group 'de.spring.jpa'
    version '1.0-SNAPSHOT'

    targetCompatibility = 1.8
    sourceCompatibility = 1.8
    

    repositories {
        mavenCentral()
        maven { url 'https://dl.bintray.com/palantir/releases' }
    }

    dependencies {
        // 1/3 Required dependency for log4j 2 with slf4j: binding between log4j2 and slf4j
        compile("org.apache.logging.log4j:log4j-slf4j-impl:${slf4jVersion}")
        // 2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin (it is the log4j 2 implementation)
        compile("org.apache.logging.log4j:log4j-core:${log4jCoreVersion}")
        // 3/3 Required dependency for getting rid of commons logging. This is the BRIDGE (no binding) between Jakarta Commons Logging (used by Spring)
        // and whatever I am using for logging (in this case I am using log4j 2) See: http://www.slf4j.org/legacy.html
        // We need exclusions in every dependency using Jakarta Commons Logging (see Spring dependencies below)
        compile("org.slf4j:jcl-over-slf4j:${jclOverSlf4jVersion}")


        compile("org.springframework:spring-context:${springVersion}") {
            exclude group: 'commons-logging', module: 'commons-logging'
        }
        compile('javax.inject:javax.inject:1')
        compile('cglib:cglib:3.2.4')


        // Unit tests
        testCompile("junit:junit:${junitVersion}")
        testCompile("org.mockito:mockito-core:${mockitoVersion}")
    }


    buildscript {
        repositories {
            mavenCentral()
            maven { url 'https://plugins.gradle.org/m2/' }
        }
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'Spring JPA Persistence, gradle example', 'Implementation-Version': version
        }
    }

    apply plugin: 'jacoco'

    apply from: "$rootProject.projectDir/build-test.gradle"
    apply from: "$rootProject.projectDir/build-integTest.gradle"

    jacoco {
        toolVersion = '0.7.6.201602180812'
        reportsDir = file("$buildDir/reports/jacoco")
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacoco/"
        }
    }

}

