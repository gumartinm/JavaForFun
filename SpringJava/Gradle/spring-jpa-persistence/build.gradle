buildscript {

    dependencies {
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${queryDslPluginVersion}"
        classpath "com.avast.gradle:docker-compose-gradle-plugin:${dockerComposePluginVersion}"
    }
}

apply plugin: 'com.ewerk.gradle.plugins.querydsl'
apply plugin: 'docker-compose'

dependencies {

    // Required JPA dependencies with hibernate
    compile("org.springframework:spring-orm:${springVersion}")
    compile("org.springframework.data:spring-data-jpa:${springJPAVersion}") {
    	exclude group: 'org.springframework', module: 'spring-beans'
    	exclude group: 'org.springframework', module: 'spring-jdbc'
    	exclude group: 'org.springframework', module: 'spring-orm'
    	exclude group: 'org.springframework', module: 'spring-core'
    	exclude group: 'org.springframework', module: 'spring-aop'
    	exclude group: 'org.springframework', module: 'spring-context'
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    compile("org.hibernate:hibernate-entitymanager:${hibernateEntityManagerVersion}")


    // Auditory using Hibernate Envers
    compile("org.springframework.data:spring-data-envers:${springDataEnversVersion}")
    compile("org.hibernate:hibernate-envers:${hibernateEnversVersion}")


    // Required by spring-context for using JSR-303. See LocalValidatorFactoryBean
    // in rest-config.xml
    compile("javax.validation:validation-api:${validationAPIVersion}")
    compile("org.hibernate:hibernate-validator:${hibernateValidatorVersion}")


    // Jackson JSON Processor, required by spring-webmvc. See messageConverters
    // in rest-config.xml
    compile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")


    //  Loading data base in run time either using liquibase
    compile("org.liquibase:liquibase-core:${liquibaseVersion}")
    // or flyway
    compile("org.flywaydb:flyway-core:${flyWayVersion}")


    // Jackson Java time support
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")

    
    // Using Querydsl
    compile("com.querydsl:querydsl-apt:${queryDslAptVersion}")
    compile("com.querydsl:querydsl-jpa:${queryDslAptVersion}")


    // Integration tests
    testCompile("org.springframework:spring-test:${springVersion}") {
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    // Either using H2
    testCompile("com.h2database:h2:${h2DatabaseVersion}")
    // or MYSQL with docker :)
    testCompile("mysql:mysql-connector-java:${mysqlConnectorVersion}")

	// DockerComposeRule DOES NOT WORK FOR THESE REASONS:
	// 1. Spring context is loaded before the DockerComposeRule
	// 2. DockerComposeRule can work with random ports, the problem is:
	// the Spring Context was loaded before DockerComposeRule and dataSource
	// requires some port for connection to data base.

	// These issues can be fixed using org.junit.Suite and running
	// DockerComposeRule in the Suite instead of in every Test.
	// But if I want to run just one test that solution does not work because
	// DockerComposeRule will be declared in the Suite instead of in the Test.
	// We will have to run our tests always from the Suite not being able to run
	// just one Test from the IDE :(
	// See: AdDescriptionRepositoryDockerComposeRuleShould
    testCompile "com.palantir.docker.compose:docker-compose-rule:${dockerComposeRuleVersion}"
}

querydsl {
  library = "com.querydsl:querydsl-apt:${queryDslAptVersion}"
  querydslSourcesDir = "$buildDir/generated-sources/querydsl"
  jpa = true
}

integTest.doFirst {
    // It is required in order to run data bases in random ports.
    // We need it for running tests from IDE and from command console but
    // also it will be required by systems like Travis where we do not control
    // the available ports.
    def mysqlInfo = dockerCompose.servicesInfos.mysql
    systemProperty 'DATABASE_PORT', mysqlInfo.ports[3306]
}

dockerCompose.isRequiredBy(integTest)
dockerCompose {
    useComposeFiles = ['src/integTest/resources/docker/docker-compose.yml']
    captureContainersOutput = false
    stopContainers = true
    removeContainers = true
    buildBeforeUp = false
}
