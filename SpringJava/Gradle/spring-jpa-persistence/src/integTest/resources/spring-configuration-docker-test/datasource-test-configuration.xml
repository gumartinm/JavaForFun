<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee.xsd">
	
	<!-- 
		1. There are two beans with the same id "dataSource"
		   One declared in datasource-configuration.xml
		   Another one declared in datasource-test-configuration.xml
		2. Both beans are declared in different XML files.
		3. Because there are in different XML files Spring does not complain about having duplicate beans.
		4. Because files in src/test will be loaded in class path after files in src/main this bean will
		   override the one declared in datasource-configuration.xml when running JUnit Tests :)
	 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />

		<!-- DATABASE_PORT should be a system or environment property
			 If running tests from the IDE, we must configure JUnit for using
			 this property with the right value.

			 It is useful if we want to run just one test from our IDE but it requires
			 to have a database always running.

			 There is no collision with gradle integTest command because docker-compose is using
			 a random port. So we can run tests one by one from our IDE (but it requires database running)
			 and also run our tests from the command console by means of gradle integTest (it will
			 start a new data base in a random and available port)
			 This feature is also required by systems like Travis where we do not control the available ports.
		 -->
		<property name="url" value="jdbc:mysql://127.0.0.1:#{systemProperties.DATABASE_PORT}/mybatis_example?createDatabaseIfNotExist=true&amp;allowMultiQueries=true&amp;autoReconnect=true&amp;characterEncoding=UTF-8" />
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean>
	
</beans>
