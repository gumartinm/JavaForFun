<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
  						   http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
  						   http://www.springframework.org/schema/context 
  						   http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<!-- 	This would be useful in case of not using a xml file for the beans declaration
		(we can use @Bean with @Configuration annotation instead of xml files) Not sure
		if this is useful in case of searching custom annotations. Apparently this code does not
		need it, so I will not use it.
	<context:annotation-config/>
	-->

	<!-- 
		     Spring makes the nasty work for us (it searches the annotations) 
		See: http://static.springsource.org/spring/docs/3.1.0.RC1/spring-framework-reference/html/beans.html#beans-annotation-config
		 
		     With filters we can narrow down the targets and hopefully improve the 
		performance while searching annotations in the Spring context. 
		Besides we disable automatic detection of classes annotated with 
		@Component, @Repository, @Service, or @Controller because we do not
		need here that feature.
	-->
    <context:component-scan base-package="de.spring.example" use-default-filters="false">
    	<context:include-filter 
    	type="annotation" 
    	expression="de.spring.example.annotation.CustomTransactional" />
	</context:component-scan>


	<!-- Our annotations handler -->	
	<bean id="annotationsHandler" class="de.spring.example.AnnotationsHandler" >
	
	</bean>
	
    <!-- 
    		In order to find annotations in inner classes we have to create Spring 
    	beans of them.
    -->
    <bean id="testOuter" class="de.spring.example.Test"/>
    <bean id="testInner" class="de.spring.example.Test$InnerService">
        <constructor-arg ref="testOuter"/>
    </bean>

</beans>
