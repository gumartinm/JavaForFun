<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
  						   http://www.springframework.org/schema/beans/spring-beans.xsd
  						   http://www.springframework.org/schema/context 
  						   http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop 
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util.xsd">
          
    <!-- 
        ************* WE HAVE TO ENABLE THE ASPECTJ SUPPORT!!!!!! ************* 
        Otherwise the @Aspect annotation (defines @AspectJ aspects) will not work
        It relies on the Java 5 specific AspectJ reflection APIs. You can not use it
        on JDK 1.4 and below.
            
            
        We could force here the use of CGLIB.
        See: http://static.springsource.org/spring/docs/3.1.0.RC1/spring-framework-reference/html/aop.html#aop-proxying
        Spring detects if the bean has an interface implementation. If it has one,
        Spring will use J2SE (J2SE needs classes with interfaces) in other case it
        will use CGLIB. We could force the CGLIB use in classes with interfaces.

        I AM GOING TO FORCE THE USE OF CGLIB BECAUSE OF THIS:
        See: http://docs.spring.io/spring/docs/3.1.0.M2/spring-framework-reference/html/aop.html#aop-proxying
        "If you want to force the use of CGLIB proxying (for example, to proxy every method defined
        for the target object, not just those implemented by its interfaces)"

        ATTENTION!!!! :O
        See: http://docs.spring.io/spring/docs/3.1.0.M2/spring-framework-reference/html/aop.html#aop-proxying
        Multiple <aop:config/> sections are collapsed into a single unified auto-proxy creator at runtime, which
        applies the strongest proxy settings that any of the <aop:config/> sections (typically from different XML
        bean definition files) specified. This also applies to the <tx:annotation-driven/> and <aop:aspectj-autoproxy/> elements.

		To be clear: using 'proxy-target-class="true"' on <tx:annotation-driven/>, <aop:aspectj-autoproxy/> or <aop:config/>
		elements will force the use of CGLIB proxies for all three of them.
    -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>



    <!--
        Spring makes the nasty work for us (it searches the annotations) 
        See: http://static.springsource.org/spring/docs/3.1.0.RC1/spring-framework-reference/html/beans.html#beans-annotation-config

        With filters we can narrow down the targets and hopefully improve the 
        performance while searching annotations in the Spring context. 
        Besides we disable automatic detection of classes annotated with 
        @Component, @Repository, @Service, or @Controller because we do not
        need here that feature.

        I do not really need the component-scan thing but I hope, it will improve performance (not sure)

        I DO NOT THINK component-scan IS INTENDED TO BE USED IN THIS WAY!!!!!
    <context:component-scan base-package="de.example.sql.deadlocks" use-default-filters="false">
        <context:include-filter 
        type="annotation" 
        expression="de.example.sql.deadlocks.annotation.DeadlockRetry" />
    </context:component-scan>
    -->

    <bean id="deadlockRetryAspect" class="de.example.sql.deadlocks.aspect.DeadlockRetryAspect">
		<property name="retryableExceptionClasses">
			<list value-type="java.lang.String">
				<value>com.mysql.jdbc.exceptions.jdbc4.MySQLTransactionRollbackException</value>
			</list>
		</property>
    </bean>





    <!-- enables configuration of transactional behavior based on annotations -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
 
    <!--
        Not required, just for fun.
    -->
 	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
                <property name="user" value="root"/>
                <property name="password" value="root"/>
                <property name="driverClass" value="com.mysql.jdbc.Driver"/>
                <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/example?autoReconnect=true"/>
                <property name="initialPoolSize" value="5"/>
                <property name="maxPoolSize" value="20"/>
                <property name="minPoolSize" value="10"/>
                <property name="acquireIncrement" value="1"/>
                <property name="acquireRetryAttempts" value="5"/>
                <property name="acquireRetryDelay" value="1000"/>
                <property name="automaticTestTable" value="con_test"/>
                <property name="checkoutTimeout" value="5000"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>




    <bean id="firstTransaction" class="de.example.sql.deadlocks.example.FirstTransaction" >
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="secondTransaction" class="de.example.sql.deadlocks.example.SecondTransaction" >
        <property name="dataSource" ref="dataSource"/>
    </bean>
 
</beans>
