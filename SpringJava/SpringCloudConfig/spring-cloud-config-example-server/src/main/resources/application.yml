server:
  port: 8888

spring:
  main:
    banner-mode: "off"
  profiles:
    active: native
  cloud:
    config:
      server:
        native:
          searchLocations: file:///${user.home}/config-repo/

        monitor:
          fixedDelay: 2000

    stream:

      # We will have 3 brokers and 1 partition. The partition will be replicated/copied in every broker. Just one broker will be the leader.
      # Zookeeper is in charge of choosing the leader.
      # If you want to consume data in order you need one consumer per partition (consumer could be a process or a thread in some Java process,
      # so one Java process could be implementing multiple consumers by means of multiple threads)
      # Consuming data in order: 1 partition + 1 consumer
      #
      # See: https://kafka.apache.org/documentation/#intro_consumers
      # However, if you require a total order over records this can be achieved with a topic that has only one partition, though
      # this will mean only one consumer process per consumer group.
      instanceCount: 1
      # This is the binder with index 0 (only one consumer/Java process)
      instanceIndex: 0

      bindings:
        output:
          binder: kafka

          # Topic
          destination: configtopic

          # Using Apache Avro with Schema Registry
          # contentType: application/*+avro
          contentType: application/json


          producer:
            # We have 3 brokers and 1 partition. This one partition will replicated/copied in every broker.
            partitionCount: 1

            # Consumer (input) and producer (output) are Spring Cloud Stream applications :)
            headerMode: embeddedHeaders



      kafka:
        binder:
          # Kafka cluster with 3 brokers
          brokers: "kafka"
          # Zookeeper
          zkNodes: "zookeeper"

          # I THINK THIS CONFIGURATION IS WORTHLESS... IT IS NEVER USED...
          # see: https://github.com/spring-cloud/spring-cloud-stream-binder-kafka/commit/8362cc35691ff64ce5ad401f43ca141910255b76
          # THERE COULD BE SOME CONFLICT WITH autoCommitOnError :/
          offsetUpdateTimeWindow: 3000

          # This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that
          # the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee.
          # This is equivalent to the acks=-1 setting.
          requiredAcks: 1


          # It applies when using autoCreateTopics and autoAddPartitions.
          # minPartitionCount: 1

          # I have 3 brokers and 1 partition. This partition must be replicated/copied in the 3 brokers.
          # This option is only useful when using autoCreateTopics (Kafka will create our topics based on this
          # configuration) Because I do not like creating stuff in run time I will be using autoCreateTopics: false
          # and this option does not apply :)
          # replicationFactor: 3

          # Topics will be created by me on the Kafka cluster/servers
          autoCreateTopics: true
          # Partitions will be created by me on the Kafka cluster/servers
          autoAddPartitions: true

        bindings:
          output:
            producer:
              sync: true
              # No batch mode.
              batchTimeout: 0


# Health indicator for binders.
management:
  health:
    binders:
      enabled: true

security:
  user:
    password: messwiththebest
    name: root

logging:
  level:
    org:
      springframework: info
    ROOT: info
