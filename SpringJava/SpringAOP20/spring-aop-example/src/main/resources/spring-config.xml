<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
  						   http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
  						   http://www.springframework.org/schema/aop 
 		 				   http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
  						   http://www.springframework.org/schema/context 
  						   http://www.springframework.org/schema/context/spring-context-2.5.xsd
  						   http://www.springframework.org/schema/tx 
  						   http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
  
  	 <!-- 
  		To force CGLIB proxying when using Spring AOP
  		See: http://static.springsource.org/spring/docs/3.1.0.RC1/spring-framework-reference/html/aop.html#aop-proxying
  	 -->
     <aop:config proxy-target-class="true">
     	<aop:aspect id="myAspectSchemaBased" ref="generalAccess">
     		<aop:pointcut id="aspectOperation" 
        				  expression="execution(* de.spring.example.service.*.*(..))"/>
        	<aop:before pointcut-ref="aspectOperation" method="monitor"/>
 		</aop:aspect>
     </aop:config>
     
	
	<aop:config proxy-target-class="true">
     	<aop:aspect id="myAspectwithAnnotations" ref="systemArchitecture">
     		<!-- 
     			See: http://static.springsource.org/spring/docs/3.1.0.RC1/spring-framework-reference/html/aop.html#aop-schema-pointcuts
     			"Note that the pointcut expression itself is using the same AspectJ pointcut expression 
     			language as described in Section 8.2, “@AspectJ support”. If you are using the schema 
     			based declaration style with Java 5, you can refer to named pointcuts defined in types 
     			(@Aspects) within the pointcut expression, but this feature is not available on JDK 1.4 and below 
     			(it relies on the Java 5 specific AspectJ reflection APIs). On JDK 1.5 therefore, another way of 
     			defining the above pointcut would be:
     		 -->
     		<aop:pointcut id="pointCutAspect" 
        				  expression="de.spring.example.SystemArchitecture.pointCutMethod()"/>
            <!-- This will be the Advice. You can use the same class for it or you can use the aop:advisor
            	 xml Spring annotation. In that case you have to use an Advice class from AOP support of Spring 1.2
            	 (below you can see an example of this)
             -->
        	<aop:before pointcut-ref="pointCutAspect" method="monitor"/>
 		</aop:aspect>
    </aop:config>
     
     
    <!-- 
		We are using AOP support from Spring 1.2 :/ for this Advice
		(we use Spring beans as advices and we can use the AOP support from Spring 1.2 for this)
		We can use and mix whatever we want. Spring is powerful but at the same time it can be a complete mess.
	 -->
	<aop:config proxy-target-class="true">
     	<aop:advisor pointcut="de.spring.example.SystemArchitecture.pointCutMethod()"
     				 advice-ref="springAdvice" />
    </aop:config>
	
	<bean id="testA" class="de.spring.example.web.TestA">
    	
    </bean>
    
    <bean id="testB" class="de.spring.example.service.TestB">
    	
    </bean>
    
    <bean id="generalAccess" class="de.spring.example.GeneralAccess">
    	
    </bean>
    
    <bean id="systemArchitecture" class="de.spring.example.SystemArchitecture">
    	
    </bean>
    
    <bean id="springAdvice" class="de.spring.example.SpringAdvice">
    	
    </bean>
    
</beans>
