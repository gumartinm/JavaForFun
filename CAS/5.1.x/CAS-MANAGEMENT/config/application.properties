# CAS server that management app will authenticate with
# This server will authenticate for any app (service) and you can login as casuser/Mellon 
cas.server.name=https://cas:8443
cas.server.prefix=https://cas:8443/cas

cas.mgmt.adminRoles=ROLE_ADMIN
cas.mgmt.userPropertiesFile=classpath:config/users.properties

# Update this URL to point at server running this management app
cas.mgmt.serverName=https://cas-management:8443

server.context-path=/cas-management
server.port=8443

spring.thymeleaf.mode=HTML
logging.config=classpath:config/log4j2.xml


######################################################## Mongo Service Registry #########################################################

# I am using EmbeddedServiceRegistryDao (which by default searches for JSON files in classpath:/services) to preload in Mongodb the service registries
# WARNING: Every file located in classpath:/services will be copied to /tmp/cas/services/ and from there it will be loaded
# see: org.apereo.cas.util.ResourceUtils.prepareClasspathResourceIfNeeded
# Preload service registries from JSON files defined in those JSON files.
# I guess it would be better to preload my data base in a different way but because this is an example I will be doing like that. 
cas.serviceRegistry.initFromJson=true


# https://apereo.github.io/cas/5.1.x/installation/Mongo-Service-Management.html
# see: https://apereo.github.io/cas/5.1.x/installation/Configuration-Properties.html#mongodb-service-registry
cas.serviceRegistry.mongo.host=mongodb
cas.serviceRegistry.mongo.databaseName=cas
cas.serviceRegistry.mongo.userId=admin
cas.serviceRegistry.mongo.password=admin
cas.serviceRegistry.mongo.collectionName=cas-service-registry
