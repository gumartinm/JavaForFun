info.description=CAS Configuration

cas.server.name=https://cas:8443
cas.server.prefix=https://cas:8443/cas
cas.adminPagesSecurity.ip=127\.0\.0\.1

# Preload service registries from JSON files
# I am using EmbeddedServiceRegistryDao (which by default searches for JSON files in classpath:/services) to preload in Mongodb the service registries
# defined in those JSON files. I guess it would be better to preload my data base in a different way but because this is an example I will be doing like that. 
cas.serviceRegistry.initFromJson=true


######################################################## Mongo Service Registry #########################################################
# https://apereo.github.io/cas/5.1.x/installation/Mongo-Service-Management.html
# see: https://apereo.github.io/cas/5.1.x/installation/Configuration-Properties.html#mongodb-service-registry
cas.serviceRegistry.mongo.host=mongodb
cas.serviceRegistry.mongo.databaseName=cas
cas.serviceRegistry.mongo.userId=admin
cas.serviceRegistry.mongo.password=
cas.serviceRegistry.mongo.collectionName=cas-service-registry


######################################################### MongoDb Ticket Registry #########################################################
# https://apereo.github.io/cas/5.1.x/installation/MongoDb-Ticket-Registry.html
cas.ticket.registry.mongo.host=mongodb
cas.ticket.registry.mongo.databaseName=cas
cas.ticket.registry.mongo.userId=admin
cas.ticket.registry.mongo.password=
cas.ticket.registry.mongo.collectionName=cas-ticket-registry

logging.config=classpath:config/log4j2.xml


######################################################### TICKET EXPIRATION POLICIES #########################################################
# https://apereo.github.io/cas/5.1.x/installation/Configuring-Ticket-Expiration-Policy.html
# TGT (cookie between CAS and user's web browser)
# https://apereo.github.io/cas/5.1.x/installation/Configuring-Ticket-Expiration-Policy.html#ticket-granting-ticket-policies
# DEFAULT VALUES
#
# Set to a negative value to never expire tickets
# cas.ticket.tgt.maxTimeToLiveInSeconds=28800
# cas.ticket.tgt.timeToKillInSeconds=7200
#
# The expiration policy applied to TGTs provides for most-recently-used expiration policy, similar to a Web server session timeout.
# cas.ticket.tgt.timeout.maxTimeToLiveInSeconds=28800
#
# The throttled timeout policy extends the Timeout policy with the concept of throttling where a ticket may be used at most every N seconds.
# cas.ticket.tgt.throttledTimeout.timeToKillInSeconds=28800
# cas.ticket.tgt.throttledTimeout.timeInBetweenUsesInSeconds=5
#
# The hard timeout policy provides for finite ticket lifetime as measured from the time of creation.
# cas.ticket.tgt.hardTimeout.timeToKillInSeconds=28800


# ST (cookie between user's web browser and final application) #####################
# https://apereo.github.io/cas/5.1.x/installation/Configuring-Ticket-Expiration-Policy.html#service-ticket-policies
# Controls the expiration policy of service tickets, as well as other properties applicable to STs.
# DEFAULT VALUES
# cas.ticket.st.maxLength=20
# cas.ticket.st.numberOfUses=1
# cas.ticket.st.timeToKillInSeconds=10


# PT
# https://apereo.github.io/cas/5.1.x/installation/Configuring-Ticket-Expiration-Policy.html#proxy-ticket-policies
# DEFAULT VALUES
# cas.ticket.pt.timeToKillInSeconds=10
# cas.ticket.pt.numberOfUses=1




######################################################### Single Log Out #########################################################
# https://apereo.github.io/cas/5.1.x/installation/Logout-Single-Signout.html#asynchronous-slo-messages
# The back channel logout message may be sent in asynchronous (the default value that you already know) or synchronous way.
# cas.slo.disabled=false
# cas.slo.asynchronous=true




######################################################## Webflow Customization #########################################################
# https://apereo.github.io/cas/5.1.x/installation/Webflow-Customization.html#required-service-for-authentication
# By default, CAS will present a generic success page if the initial authentication request does not identify the target application. In some cases,
# the ability to login to CAS without logging in to a particular service may be considered a misfeature because in practice, too few users and
# institutions are prepared to understand, brand, and support what is at best a fringe use case of logging in to CAS for the sake of establishing an
# SSO session without logging in to any CAS-reliant service.

# As such, CAS optionally allows adopters to not bother to prompt for credentials when no target application is presented and instead presents a message when users visit CAS directly without specifying a service.
cas.sso.missingService=false
cas.sso.renewedAuthn=false
