info.description=CAS Configuration

cas.server.name=https://cas:8443
cas.server.prefix=https://cas:8443/cas
cas.adminPagesSecurity.ip=127\.0\.0\.1


logging.config=classpath:config/log4j2.xml



######################################################## Mongo Service Registry #########################################################

# I am using EmbeddedServiceRegistryDao (which by default searches for JSON files in classpath:/services) to preload in Mongodb the service registries
# WARNING: Every file located in classpath:/services will be copied to /tmp/cas/services/ and from there it will be loaded
# see: org.apereo.cas.util.ResourceUtils.prepareClasspathResourceIfNeeded
# Preload service registries from JSON files defined in those JSON files.
# I guess it would be better to preload my data base in a different way but because this is an example I will be doing like that. 
cas.serviceRegistry.initFromJson=true


# https://apereo.github.io/cas/5.1.x/installation/Mongo-Service-Management.html
# see: https://apereo.github.io/cas/5.1.x/installation/Configuration-Properties.html#mongodb-service-registry
cas.serviceRegistry.mongo.host=mongodb
cas.serviceRegistry.mongo.databaseName=cas
cas.serviceRegistry.mongo.userId=admin
cas.serviceRegistry.mongo.password=admin
cas.serviceRegistry.mongo.collectionName=cas-service-registry




######################################################### MongoDb Ticket Registry #########################################################
# https://apereo.github.io/cas/5.1.x/installation/MongoDb-Ticket-Registry.html
cas.ticket.registry.mongo.host=mongodb
cas.ticket.registry.mongo.databaseName=cas
cas.ticket.registry.mongo.userId=admin
cas.ticket.registry.mongo.password=admin
cas.ticket.registry.mongo.collectionName=cas-ticket-registry




######################################################### TICKET EXPIRATION POLICIES #########################################################
# https://apereo.github.io/cas/5.1.x/installation/Configuring-Ticket-Expiration-Policy.html
# TGT (cookie between CAS and user's web browser)
# https://apereo.github.io/cas/5.1.x/installation/Configuring-Ticket-Expiration-Policy.html#ticket-granting-ticket-policies
# DEFAULT VALUES
#
# Set to a negative value to never expire tickets
# cas.ticket.tgt.maxTimeToLiveInSeconds=28800
# cas.ticket.tgt.timeToKillInSeconds=7200
#
# The expiration policy applied to TGTs provides for most-recently-used expiration policy, similar to a Web server session timeout.
# cas.ticket.tgt.timeout.maxTimeToLiveInSeconds=28800
#
# The throttled timeout policy extends the Timeout policy with the concept of throttling where a ticket may be used at most every N seconds.
# cas.ticket.tgt.throttledTimeout.timeToKillInSeconds=28800
# cas.ticket.tgt.throttledTimeout.timeInBetweenUsesInSeconds=5
#
# The hard timeout policy provides for finite ticket lifetime as measured from the time of creation.
# cas.ticket.tgt.hardTimeout.timeToKillInSeconds=28800


# ST (cookie between user's web browser and final application) #####################
# https://apereo.github.io/cas/5.1.x/installation/Configuring-Ticket-Expiration-Policy.html#service-ticket-policies
# Controls the expiration policy of service tickets, as well as other properties applicable to STs.
# DEFAULT VALUES
# cas.ticket.st.maxLength=20
# cas.ticket.st.numberOfUses=1
# cas.ticket.st.timeToKillInSeconds=10


# PT
# https://apereo.github.io/cas/5.1.x/installation/Configuring-Ticket-Expiration-Policy.html#proxy-ticket-policies
# DEFAULT VALUES
# cas.ticket.pt.timeToKillInSeconds=10
# cas.ticket.pt.numberOfUses=1




######################################################### Single Log Out #########################################################
# https://apereo.github.io/cas/5.1.x/installation/Logout-Single-Signout.html#asynchronous-slo-messages
# The back channel logout message may be sent in asynchronous (the default value that you already know) or synchronous way.
cas.slo.disabled=false
cas.slo.asynchronous=true




######################################################## Webflow Customization #########################################################
# https://apereo.github.io/cas/5.1.x/installation/Webflow-Customization.html#required-service-for-authentication
# By default, CAS will present a generic success page if the initial authentication request does not identify the target application. In some cases,
# the ability to login to CAS without logging in to a particular service may be considered a misfeature because in practice, too few users and
# institutions are prepared to understand, brand, and support what is at best a fringe use case of logging in to CAS for the sake of establishing an
# SSO session without logging in to any CAS-reliant service.

# As such, CAS optionally allows adopters to not bother to prompt for credentials when no target application is presented and instead presents a message when users visit CAS directly without specifying a service.
cas.sso.missingService=false
cas.sso.renewedAuthn=false

# Webflow Session
# https://apereo.github.io/cas/5.1.x/installation/Webflow-Customization-Sessions.html

# Manage session storage via Redis
spring.session.store-type=redis
spring.redis.host=redis
spring.redis.password=redis
spring.redis.port=6379

cas.webflow.signing.key=ANuF0UfF_5U5yNiwSLPY0L8sRcNgTw0AYGECE8jbQyn_YZBokhVlaNr0IAzx4xClKIb_jJnjiTyVmHIjLb6Lfw
cas.webflow.signing.keySize=512
cas.webflow.encryption.keySize=16
cas.webflow.encryption.key=FbIVCDPTYNzRFSJi
cas.webflow.alg=AES






######################################################### Audit #########################################################
# https://apereo.github.io/cas/5.1.x/installation/Audits.html
cas.audit.auditFormat=DEFAULT
cas.audit.ignoreAuditFailures=false
cas.audit.singlelineSeparator=|
cas.audit.useSingleLine=false
cas.audit.appCode=CAS
cas.audit.alternateServerAddrHeaderName=
cas.audit.alternateClientAddrHeaderName=X-Forwarded-For
cas.audit.useServerHostAddress=false

# JPA / data base properties
cas.audit.jdbc.healthQuery=select 1
# cas.audit.jdbc.isolateInternalQueries=false
cas.audit.jdbc.url=jdbc:mysql://mysql:3306/cas?createDatabaseIfNotExist=true&amp;allowMultiQueries=true&amp;autoReconnect=true&amp;characterEncoding=UTF-8
cas.audit.jdbc.failFast=true
# Used by Spring transactions
cas.audit.jdbc.isolationLevelName=ISOLATION_REPEATABLE_READ
cas.audit.jdbc.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# cas.audit.jdbc.leakThreshold=10
# Used by Spring transactions
cas.audit.jdbc.propagationBehaviorName=PROPAGATION_REQUIRED
# cas.audit.jdbc.batchSize=1
cas.audit.jdbc.user=cas
# Database will be created by means of my dump.sql script
cas.audit.jdbc.ddlAuto=none
# cas.audit.jdbc.maxAgeDays=180
cas.audit.jdbc.password=cas
cas.audit.jdbc.autocommit=false
cas.audit.jdbc.driverClass=com.mysql.jdbc.Driver
cas.audit.jdbc.idleTimeout=5000

# Datasource properties. HikariDataSource by default. See: org.apereo.cas.audit.config.CasSupportJdbcAuditConfiguration it is using org.apereo.cas.configuration.support.Beans.newDataSource
# cas.audit.jdbc.dataSourceName=
# cas.audit.jdbc.dataSourceProxy=false
# cas.audit.jdbc.pool.suspension=false
# cas.audit.jdbc.pool.minSize=6
# cas.audit.jdbc.pool.maxSize=18
# cas.audit.jdbc.pool.maxWait=2000





######################################################### Throttling Authentication Attempts requires of audit CAS module  #########################################################
# Throttling and audit information are stored in the same table. Because of that, if we want throttling we also need audit. :(
# https://apereo.github.io/cas/5.1.x/installation/Configuring-Authentication-Throttling.html
cas.authn.throttle.usernameParameter=username
cas.authn.throttle.startDelay=10000
cas.authn.throttle.repeatInterval=20000
cas.authn.throttle.appcode=CAS

cas.authn.throttle.failure.threshold=100
cas.authn.throttle.failure.code=AUTHENTICATION_FAILED
cas.authn.throttle.failure.rangeSeconds=60


# JPA / data base properties
# cas.authn.throttle.jdbc.auditQuery=SELECT AUD_DATE FROM COM_AUDIT_TRAIL WHERE AUD_CLIENT_IP = ? AND AUD_USER = ? \
#                                    AND AUD_ACTION = ? AND APPLIC_CD = ? AND AUD_DATE >= ? ORDER BY AUD_DATE DESC
cas.authn.throttle.jdbc.healthQuery=select 1
# cas.authn.throttle.jdbc.isolateInternalQueries=false
cas.authn.throttle.jdbc.url=jdbc:mysql://mysql:3306/cas?createDatabaseIfNotExist=true&amp;allowMultiQueries=true&amp;autoReconnect=true&amp;characterEncoding=UTF-8
cas.authn.throttle.jdbc.failFast=true
# Used by Spring transactions
cas.authn.throttle.jdbc.isolationLevelName=ISOLATION_REPEATABLE_READ
cas.authn.throttle.jdbc.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# cas.authn.throttle.jdbc.leakThreshold=10
# Used by Spring transactions
cas.authn.throttle.jdbc.propagationBehaviorName=PROPAGATION_REQUIRED
# cas.authn.throttle.jdbc.batchSize=1
cas.authn.throttle.jdbc.user=cas
# Database will be created by means of my dump.sql script
cas.authn.throttle.jdbc.ddlAuto=none
# cas.authn.throttle.jdbc.maxAgeDays=180
cas.authn.throttle.jdbc.password=cas
cas.authn.throttle.jdbc.autocommit=false
cas.authn.throttle.jdbc.driverClass=com.mysql.jdbc.Driver
cas.authn.throttle.jdbc.idleTimeout=5000

# Datasource properties. HikariDataSource by default. See: org.apereo.cas.web.support.config.CasJdbcThrottlingConfiguration it is using org.apereo.cas.configuration.support.Beans.newDataSource
# cas.authn.throttle.jdbc.pool.suspension=false
# cas.authn.throttle.jdbc.pool.minSize=6
# cas.authn.throttle.jdbc.pool.maxSize=18
# cas.authn.throttle.jdbc.pool.maxWait=2000
# cas.authn.throttle.jdbc.dataSourceName=
# cas.authn.throttle.jdbc.dataSourceProxy=false



######################################################### Mongo Events #########################################################
# https://apereo.github.io/cas/5.1.x/installation/Configuring-Authentication-Events.html
cas.events.mongodb.clientUri=mongodb://admin:admin@mongodb/cas
cas.events.mongodb.dropCollection=false
cas.events.mongodb.collection=cas-events

######################################################### SSO Session Cookie #########################################################
# https://apereo.github.io/cas/5.1.x/installation/Configuring-SSO-Session-Cookie.html
# Used by TicketGrantingCookieCipherExecutor
cas.tgc.encryptionKey=YlnG7z71efctnpUK3JxvCwFqnuYxeOuWqZQ3FKSxUvc
cas.tgc.signingKey=GGEUzuxjBySc8NE02uKnp5vDDAYv-Zxc-G0DRZeT60CBjY__3kYRFndhEBczA8NoPnU0I1NdYR_GBereCTDN9Q
cas.tgc.cipherEnabled=true
