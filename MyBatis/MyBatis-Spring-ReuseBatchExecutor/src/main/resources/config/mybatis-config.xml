<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
  <settings>
    <!--
    MyBatis uses two caches: a local cache and a second level cache.

    Each time a new session is created MyBatis creates a local cache and attaches
    it to the session. Any query executed within the session will be stored in
    the local cache so further executions of the same query with the same input
    parameters will not hit the database. The local cache is cleared upon update,
    commit, rollback and close.

    By default local cache data is used for the whole session duration. This cache
    is needed to resolve circular references and to speed up repeated nested queries,
    so it can never be completely disabled but you can configure the local cache to
    be used just for the duration of an statement execution by setting localCacheScope=STATEMENT.

    Note that when the localCacheScope is set to SESSION, MyBatis returns references
    to the same objects which are stored in the local cache. Any modification of
    returned object (lists etc.) influences the local cache contents and subsequently
    the values which are returned from the cache in the lifetime of the session.
    Therefore, as best practice, do not to modify the objects returned by MyBatis.

	A) Ver CachingExecutor, se habilita o deshabilita con la opción cacheEnabled:
	1. Se hace una query tipo SELECT (no DMLs como UPDATE, INSERT, etc)
	2. Se crea una clave basada en la query (el statement)
	3. Si la clave no está en la cache, se hace la query (se delega al Executor que haya por debajo)
	4. Se guarda el resultado en la cache para esa query.
	5. MODIFICO LOS OBJETOS RETORNADOS.
	6. Una nueva query igual a la anterior será encontrada en la cache porque la clave es la misma.
	7. Yo espero que lo que devuelva la query sea lo que está en base de datos pero como modifiqué
	   los objetos ahora la cache me devuelve los objetos modificados!!!!! DESASTRE TOTAL.
	
	CONCLUSION: o deshabilitas la cache con cacheEnabled=false o tienes mucho cuidado de NUNCA modificar
	            los objetos retornados.
	
    LA CACHE SOLO SE USA CUANDO NO HAY DMLs. SI LA QUERY ES UN DML TIPO update, insert, etc, etc,
    LA CACHE NO SE USARÁ. SOLO SE USA CON selects (POR EJEMPLO).
    
    
    B) Ver BaseExecutor localCache, no puede ser nunca deshabilitada completamente, solo ponerla como
    STATEMENT o SESSION con la opción localCacheScope:
    Ver en BaseExecutor la siguiente linea:
     	list = resultHandler == null ? (List<E>) localCache.getObject(key) : null;
    Pasa exactamente lo mismo que pasaba con CachingExecutor :(
    
    CONCLUSIÓN: o pones localCache a nivel de STATEMENT con localCacheScope=STATEMENT o tienes mucho
    			cuidado de NUNCA modificar los objetos retornados.
	
	
	¿Para qué existe CachingExecutor si ya hay una localCache que puedo poner a nivel de SESSION?
	
	-->
    <setting name="cacheEnabled" value="false"/>
    <setting name="localCacheScope" value="STATEMENT"/>
    <setting name="lazyLoadingEnabled" value="false"/>
    <setting name="aggressiveLazyLoading" value="false"/>
    <setting name="multipleResultSetsEnabled" value="true"/>
    <setting name="useColumnLabel" value="false"/>
    <setting name="useGeneratedKeys" value="false"/>
    <setting name="autoMappingBehavior" value="PARTIAL"/>
    <setting name="defaultExecutorType" value="BATCH"/>
    <setting name="defaultStatementTimeout" value="5"/>
    <setting name="safeRowBoundsEnabled" value="false"/>
    <setting name="mapUnderscoreToCamelCase" value="false"/>
    <setting name="jdbcTypeForNull" value="OTHER"/>
    <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
    <setting name="logPrefix" value="mybatislogger"/>
    <setting name="logImpl" value="SLF4J"/>
    <setting name="proxyFactory" value="CGLIB"/>
  </settings>
  
  
  <plugins>
    <plugin interceptor="de.example.mybatis.interceptor.ReuseBatchExecutorInterceptor">
    </plugin>
    <plugin interceptor="de.example.mybatis.interceptor.ChangeUpdateStatementsInRunTimeInterceptor">
    </plugin>
    <plugin interceptor="de.example.mybatis.interceptor.ChangeQueryStatementsInRunTimeInterceptor">
    </plugin>
    <plugin interceptor="de.example.mybatis.interceptor.ChangeQueryBoundStatementsInRunTimeInterceptor">
    </plugin>
  </plugins>
  
</configuration>