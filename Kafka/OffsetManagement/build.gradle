group = theGroup
version = theVersion
description = theDescription

project.ext {
    // FATJAR
    mainClassName = 'de.example.kafka.tools.OffsetManagement'

    // LOG4J2 dependencies
    slf4jVersion = '2.7'
    log4jCoreVersion = '2.7'
    jclOverSlf4jVersion = '1.7.22'

    // Unit test dependencies
    mockitoVersion = '2.4.1'
    junitVersion = '4.12'
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

targetCompatibility = 1.8
sourceCompatibility = 1.8


// *****************   REPOSITORIES FOR DEPENDENCIES   *****************
repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
}


// *****************   PLUGINS   *****************
buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

// *****************   DEPENDENCIES   *****************
dependencies {
    // 1/3 Required dependency for log4j 2 with slf4j: binding between log4j2 and slf4j
    compile("org.apache.logging.log4j:log4j-slf4j-impl:${slf4jVersion}")
    // 2/3 Required dependency for log4j 2 with slf4j: log4j 2 maven plugin (it is the log4j 2 implementation)
    compile("org.apache.logging.log4j:log4j-core:${log4jCoreVersion}")
    // 3/3 Required dependency for getting rid of commons logging. This is the BRIDGE (no binding) between Jakarta Commons Logging (used by Spring)
    // and whatever I am using for logging (in this case I am using log4j 2) See: http://www.slf4j.org/legacy.html
    // We need exclusions in every dependency using Jakarta Commons Logging (see Spring dependencies below)
    compile("org.slf4j:jcl-over-slf4j:${jclOverSlf4jVersion}")

    compile('org.apache.kafka:kafka_2.11:0.10.1.1') {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    compile('javax.validation:validation-api:1.1.0.Final')


    // Unit tests
    testCompile("junit:junit:${junitVersion}")
    testCompile("org.mockito:mockito-core:${mockitoVersion}")
}



// *****************   UNIT TESTS *****************
test {

    // explicitly include or exclude tests
    exclude '**/*IntegrationShould.class'

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }

    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

// *****************   JAVADOC   *****************
javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

// *****************   PUBLISH TO REPOSITORY   *****************
// Calls javadoc plugin and creates jar with the generated docs
task javadocJar(type: Jar) {
    from javadoc
    classifier 'javadoc'
}



// Calls java plugin and creates jar with the sources
task sourceJar(type: Jar) {
    from sourceSets.main.java
    classifier 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // Publishes war or jar file depending on whether we are using the war plugin.
            if (plugins.withType(WarPlugin)) {
                from components.web
            } else {
                from components.java
            }

            // Publishes jar with sources
            artifact sourceJar {
                classifier 'sources'
            }
            // Publishes jar with javadoc
            artifact javadocJar {
                classifier 'javadoc'
            }

            // By default, Maven scope will be runtime. We want scope compile :/
            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username project.artifactory_username
                password project.artifactory_password
            }

            if(project.version.endsWith('-SNAPSHOT')) {
                url 'http://artifactory/artifactory/libs-snapshot'
            } else {
                url 'http://artifactory/artifactory/libs-release'
            }
        }
    }
}

// *****************   FATJAR / MANIFEST FILE  *****************
jar {
    manifest {
        attributes('Main-Class': "$mainClassName",
            'Implementation-Title': 'Kafka: my tools',
            'Implementation-Version': theVersion,
            'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Built-By': System.getProperty('user.name'),
            'Built-JDK': System.getProperty('java.version')
        )
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
